#Test with: http://editor.swagger.io/
swagger: '2.0'
info:
  version: 1.0.0
  title: Microservice for Users
  description: Ruby + MySQL
  license:
    name: Software Architecture 2018-I
host: 192.168.99.101:4004
basePath: /
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /users:
    post:
      summary: Creates a new user
      operationId: createUser
      parameters:
        - name: user
          in: body
          required: true
          description: User Object
          schema:
            $ref: '#/definitions/UserInput'
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

    /authenticate:
    post:
        summary: Authenticate a user
        operationId: authenticateUser
        parameters:
        - email :user
        - password : user
          in body
          required: true
          description: User Object
          schema:
           $ref: '#/definitions/User'
        responses:
        '200':
            description: return token jwt
        '401':
            description: invalid credentials

    /authorize:

        summary: Authorized a user
        operationId: authorizateUser
        parameters:
        -Authorization : jwt
            in: headers
            required: true
            description: User Object
            schema:
            $ref: '#/definitions/User'
        responses:
        '200':
            description: current_user
        '401':
            description: Unauthorized
    get:
      summary: Returns all users
      operationId: getAllUsers
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/UsersList'
        '406':
          description: Not Acceptable (Invalid Params)
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'

  /users/{id}:
    get:
      summary: Returns a user with the given id
      operationId: getUsertById
      parameters:
        - name: id
          in: path
          description: The id of the user to be returned
          required: true
          type: integer
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
            description: Not Acceptable (Invalid Params)
            schema:
              $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

    put:
      summary: Updates a user with the given id
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: The id of the user to be updated
          required: true
          type: integer
        - name: user
          in: body
          required: true
          description: User Object
          schema:
            $ref: '#/definitions/UserInput'
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
            description: Not Acceptable (Invalid Params)
            schema:
              $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

    delete:
      summary: Deletes a user with the given id
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The id of the user to be deleted
          required: true
          type: integer
      responses:
        '200':
          description: Ok
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
            description: Not Acceptable (Invalid Params)
            schema:
              $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

definitions:

  # Users
  User:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      lastname:
        type: string
      password:
        type: string

  UserInput:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      lastname:
        type: string
      password:
        type: string

  UsersList:
    type: object
    required:
      - total
      - list
    properties:
      total:
        type: number
      list:
        type: array
        items:
          $ref: '#/definitions/User'

# Errors
  ErrorModel:
    type: object
    required:
      - message
      - code
    properties:
      message:
        type: string
      code:
        type: number
      description:
        type: object
